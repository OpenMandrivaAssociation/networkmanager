diff -Naur NetworkManager-0.9.10.2/src/settings/plugins/ifcfg-rh/reader.c NetworkManager-0.9.10.2.tpg/src/settings/plugins/ifcfg-rh/reader.c
--- NetworkManager-0.9.10.2/src/settings/plugins/ifcfg-rh/reader.c	2015-03-29 10:25:33.000000000 +0000
+++ NetworkManager-0.9.10.2.tpg/src/settings/plugins/ifcfg-rh/reader.c	2015-03-29 10:28:29.913516217 +0000
@@ -317,6 +317,44 @@
 	return TRUE;
 }
 
+/* Mandriva does not seem to ever hex-encode SSID in ifcfg. So do not bother
+ * as well - just get what we have. This highly simplifies the logic */
+/* FIXME this currently fails for '\0' which is not accepted as input either */
+static GByteArray *
+ifcfg_mdv_parse_ssid(char *value, GError **error)
+       {
+         gsize ssid_len;
+         gchar *ssid = NULL;
+         GByteArray *a;
+         ssid = g_strdup(value);
+         if (!ssid) {
+           g_set_error (error, IFCFG_PLUGIN_ERROR, 0,
+                        "Cannot duplicate SSID");
+           goto error;
+         }
+         svUnescape (ssid);
+         ssid_len = strlen (ssid);
+         if (ssid_len > 32 || ssid_len == 0) {
+                 g_set_error (error, IFCFG_PLUGIN_ERROR, 0,
+                              "Invalid SSID '%s' (size %zu not between 1 and 32 inclusive)",
+                              value, ssid_len);
+                 goto error;    
+         }
+         a = g_byte_array_sized_new (ssid_len);
+         if (!a) {
+                 g_set_error (error, IFCFG_PLUGIN_ERROR, 0,
+                              "Cannot allocate SSID");
+                 goto error;   
+         }
+         g_byte_array_append (a, (const guint8 *) ssid, ssid_len);
+         g_free(ssid);
+         return a;
+error:
+         g_free(ssid);
+         return NULL;
+
+       }
+
 static void
 iscsiadm_child_setup (gpointer user_data G_GNUC_UNUSED)
 {
@@ -3569,6 +3607,7 @@
 	GSList *macaddr_blacklist = NULL;
 	char *value;
 	gint64 chan = 0;
+	int has_mdv_ssid = 0;
 
 	s_wireless = NM_SETTING_WIRELESS (nm_setting_wireless_new ());
 
@@ -3621,7 +3660,20 @@
 		g_strfreev (list);
 	}
 
-	value = svGetValue (ifcfg, "ESSID", TRUE);
+       value = svGetValue (ifcfg, "WIRELESS_ESSID", TRUE);
+       if (value) {
+         array = ifcfg_mdv_parse_ssid (value, error);
+         g_free (value);
+
+         if (array) {
+           has_mdv_ssid = 1;
+           g_object_set (s_wireless, NM_SETTING_WIRELESS_SSID, array, NULL);
+           g_byte_array_free (array, TRUE); 
+         }
+       }
+       value = NULL;
+       if (!has_mdv_ssid)
+         value = svGetValue (ifcfg, "ESSID", TRUE);
 	if (value) {
 		gsize ssid_len = 0, value_len = strlen (value);
 		char *p = value, *tmp;
