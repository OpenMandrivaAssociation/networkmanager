--- NetworkManager-1.0.0/src/settings/plugins/ifcfg-rh/reader.c.0064~	2014-12-19 18:14:14.000000000 +0100
+++ NetworkManager-1.0.0/src/settings/plugins/ifcfg-rh/reader.c	2015-01-07 10:31:47.522801078 +0100
@@ -252,6 +252,46 @@ make_connection_setting (const char *fil
 }
 
 /* Returns TRUE on missing address or valid address */
+discover_mac_address(shvarFile *ifcfg, GByteArray **array, GError **error)
+{
+	int fd, ret;
+	struct ifreq ifr;
+	char *device;
+
+	device = svGetValue (ifcfg, "DEVICE", FALSE);
+
+	g_return_val_if_fail (device != NULL, FALSE);
+	g_return_val_if_fail (array != NULL, FALSE);
+	g_return_val_if_fail (*array == NULL, FALSE);
+	g_return_val_if_fail (error != NULL, FALSE);
+	g_return_val_if_fail (*error == NULL, FALSE);
+
+	fd = socket(AF_INET, SOCK_DGRAM, 0);
+	if (fd < 0) {
+		g_set_error(error, IFCFG_PLUGIN_ERROR, errno,
+				"Unable to discover MAC address: socket error");
+		g_free (device);
+		return FALSE;
+	}
+
+	ifr.ifr_addr.sa_family = AF_INET;
+	strncpy(ifr.ifr_name, device, IFNAMSIZ-1);
+
+	ret = ioctl(fd, SIOCGIFHWADDR, &ifr);
+	g_free (device);
+	if (ret < 0) {
+		g_set_error(error, IFCFG_PLUGIN_ERROR, errno,
+				"Unable to discover MAC address: ioctl error");
+		return FALSE;
+	}
+	close(fd);
+
+	*array = g_byte_array_sized_new (ETH_ALEN);
+	g_byte_array_append (*array, (guint8 *) ifr.ifr_hwaddr.sa_data, ETH_ALEN);
+	return TRUE;
+}
+
+static gboolean
 static gboolean
 read_ip4_address (shvarFile *ifcfg,
                   const char *tag,
@@ -3420,6 +3460,10 @@ wireless_connection_from_ifcfg (const ch
 	NMSetting *con_setting = NULL;
 	NMSetting *wireless_setting = NULL;
 	NMSetting8021x *s_8021x = NULL;
+		/* if we don't have a HWADDR saved in ifcfg file, try to discover it manually */
+		if (!array) {
+			discover_mac_address(ifcfg, &array, error);
+		}
 	GBytes *ssid;
 	NMSetting *security_setting = NULL;
 	char *printable_ssid = NULL;
@@ -3710,6 +3754,11 @@ parse_infiniband_p_key (shvarFile *ifcfg
 		               device, ifname);
 		goto done;
 	}
+		/* if we don't have a HWADDR saved in ifcfg file, try to discover it manually */
+		if (!mac) {
+			discover_mac_address(ifcfg, &mac, error);
+		}
+
 
 	*out_p_key = id;
 	*out_parent = g_strdup (physdev);
